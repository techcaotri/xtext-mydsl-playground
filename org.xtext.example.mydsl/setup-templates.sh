#!/bin/bash

# Setup script for DataType DSL template files
# Creates the template directory structure and files

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEMPLATE_DIR="$SCRIPT_DIR/src/resources/templates"

echo "Setting up DataType DSL template files..."

# Create directory structure
echo "Creating template directories..."
mkdir -p "$TEMPLATE_DIR/cpp"
mkdir -p "$TEMPLATE_DIR/proto"
mkdir -p "$TEMPLATE_DIR/cmake"

# Function to create a template file
create_template() {
    local file="$1"
    local content="$2"
    echo "Creating $file..."
    echo "$content" > "$TEMPLATE_DIR/$file"
}

# C++ Templates
create_template "cpp/header.template" '/**
 * @file {{FILE_NAME}}
 * @brief {{DESCRIPTION}}
 * 
 * Generated by DataType DSL Generator
 * Generation time: {{TIMESTAMP}}
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Changes will be overwritten on next generation
 */

#ifndef {{GUARD_NAME}}
#define {{GUARD_NAME}}

{{INCLUDES}}

{{NAMESPACE_BEGIN}}

{{FORWARD_DECLARATIONS}}

{{CONTENT}}

{{NAMESPACE_END}}

#endif // {{GUARD_NAME}}'

create_template "cpp/struct.template" '{{COMMENT}}
struct {{STRUCT_NAME}}{{BASE_CLASS}} {
{{FIELDS}}

    // Default constructor
    {{STRUCT_NAME}}() = default;
    
    // Destructor
    ~{{STRUCT_NAME}}() = default;
    
    // Copy constructor and assignment
    {{STRUCT_NAME}}(const {{STRUCT_NAME}}&) = default;
    {{STRUCT_NAME}}& operator=(const {{STRUCT_NAME}}&) = default;
    
    // Move constructor and assignment
    {{STRUCT_NAME}}({{STRUCT_NAME}}&&) = default;
    {{STRUCT_NAME}}& operator=({{STRUCT_NAME}}&&) = default;
};'

create_template "cpp/enum.template" '{{COMMENT}}
enum class {{ENUM_NAME}}{{BASE_TYPE}} {
{{ENUMERATORS}}
};'

create_template "cpp/enumerator.template" '    {{ENUMERATOR_COMMENT}}
    {{ENUMERATOR_NAME}}{{ENUMERATOR_VALUE}}'

create_template "cpp/typedef.template" '{{COMMENT}}
using {{TYPEDEF_NAME}} = {{ACTUAL_TYPE}};'

create_template "cpp/array.template" '{{COMMENT}}
using {{ARRAY_NAME}} = std::vector<{{ELEMENT_TYPE}}>;'

create_template "cpp/field.template" '    {{FIELD_COMMENT}}
    {{FIELD_TYPE}}{{ARRAY_DECL}} {{FIELD_NAME}}{{INITIALIZER}};'

create_template "cpp/includes.template" '// Standard library includes
#include <cstdint>
#include <string>
#include <vector>
#include <array>
#include <memory>

{{CUSTOM_INCLUDES}}'

create_template "cpp/comment.template" '/**
{{COMMENT_LINES}}
 */'

create_template "cpp/types_header.template" '#ifndef TYPES_H
#define TYPES_H

/**
 * @file Types.h
 * @brief Common type definitions for DataType DSL
 * 
 * Generated: {{TIMESTAMP}}
 * 
 * This file includes all generated type headers
 */

#include <cstdint>
#include <string>
#include <vector>
#include <array>
#include <memory>

// Include all generated type headers
{{TYPE_INCLUDES}}

#endif // TYPES_H'

# Proto Templates
create_template "proto/file.template" '// Generated by DataType DSL Generator
// Source: {{SOURCE_FILE}}
// Generated: {{TIMESTAMP}}

syntax = "proto3";

{{PACKAGE}}

{{OPTIONS}}

{{IMPORTS}}

{{CONTENT}}'

create_template "proto/message.template" '{{COMMENT}}
message {{MESSAGE_NAME}} {
{{FIELDS}}
}'

create_template "proto/enum.template" '{{COMMENT}}
enum {{ENUM_NAME}} {
{{ENUMERATORS}}
}'

create_template "proto/enumerator.template" '    {{ENUMERATOR_COMMENT}}
    {{ENUMERATOR_NAME}} = {{ENUMERATOR_VALUE}};'

create_template "proto/field.template" '    {{FIELD_COMMENT}}
    {{REPEATED}}{{FIELD_TYPE}} {{FIELD_NAME}} = {{FIELD_NUMBER}};'

# CMake Templates
create_template "cmake/CMakeLists.template" 'cmake_minimum_required(VERSION 3.16)
project({{PROJECT_NAME}} VERSION {{VERSION}} LANGUAGES CXX)

# C++ Standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        add_compile_options(-g -O0)
    else()
        add_compile_options(-O3)
    endif()
elseif(MSVC)
    add_compile_options(/W4)
endif()

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Create header-only library
add_library({{PROJECT_NAME}} INTERFACE)
target_include_directories({{PROJECT_NAME}} INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

# Installation rules
install(DIRECTORY include/
    DESTINATION include
    FILES_MATCHING PATTERN "*.h"
)

# Optional: Add test executable
option(BUILD_TESTS "Build test programs" OFF)
if(BUILD_TESTS)
    add_executable(test_{{PROJECT_NAME}} test/test_main.cpp)
    target_link_libraries(test_{{PROJECT_NAME}} {{PROJECT_NAME}})
endif()'

echo ""
echo "Template files created successfully!"
echo ""
echo "Template directory structure:"
tree "$TEMPLATE_DIR" 2>/dev/null || find "$TEMPLATE_DIR" -type f | sort

echo ""
echo "You can now customize the templates in: $TEMPLATE_DIR"
echo "The generators will use these templates to generate code."
